// packages/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ---------------- Enums mapeados aos valores do banco ----------------

enum Role {
  ADMIN @map("admin")
  USER  @map("user")
}

enum UserStatus {
  ACTIVE   @map("active")
  INACTIVE @map("inactive")
}

enum OrderStatus {
  OPEN @map("open")
  LATE @map("late")
  DONE @map("done")
}

enum OrderUnit {
  UNIDADES @map("Unidades")
  KG       @map("KG")
  M        @map("M")
  M2       @map("M2")
  M3       @map("M3")
  PECAS    @map("Peças")
}

enum MaterialUnit {
  PECAS @map("Peças")
  KG    @map("KG")
  M     @map("M")
  M2    @map("M2")
  M3    @map("M3")
}

// ---------------- Models ----------------

model User {
  id           Int         @id @default(autoincrement())
  name         String
  email        String      @unique
  passwordHash String?     @map("password_hash")
  role         Role        @default(USER)
  status       UserStatus  @default(ACTIVE) @map("status")

  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt      @map("updated_at")

  @@map("users")
}

model Company {
  id        Int      @id @default(autoincrement())
  name      String
  cnpj      String?  @unique
  createdAt DateTime @default(now()) @map("created_at")

  orders    Order[]

  @@map("companies")
}

model Order {
  id             Int          @id @default(autoincrement())
  companyId      Int          @map("company_id")
  title          String
  qty            Decimal      @db.Decimal(12, 3) @default(0)
  unit           OrderUnit    @default(UNIDADES)
  clientDeadline DateTime?    @db.Date @map("client_deadline")
  finalDeadline  DateTime?    @db.Date @map("final_deadline")
  status         OrderStatus  @default(OPEN)

  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt      @map("updated_at")

  company   Company  @relation(fields: [companyId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  processes Process[]
  materials Material[]

  @@index([companyId], map: "idx_orders_company_id")
  @@index([status], map: "idx_orders_status")
  @@map("orders")
}

model Process {
  id          Int       @id @default(autoincrement())
  orderId     Int       @map("order_id")
  name        String    @db.VarChar(100)
  plannedDate DateTime? @db.Date @map("planned_date")
  done        Boolean   @default(false)

  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt      @map("updated_at")

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([orderId], map: "idx_processes_order_id")
  @@map("processes")
}

model Material {
  id          Int           @id @default(autoincrement())
  orderId     Int           @map("order_id")
  description String
  qty         Decimal       @db.Decimal(12, 3) @default(0)
  unit        MaterialUnit  @default(PECAS)
  inStock     Boolean       @default(false) @map("in_stock")

  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt      @map("updated_at")

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([orderId], map: "idx_materials_order_id")
  @@map("materials")
}